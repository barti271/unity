[[notifications]]
=== Notifications and e-mail settings

Notifications and other messages are sent by Unity in several cases, for instance as an optional verification
step during password reset or to notify an administrator about a new registration request.

Unity offers several message channels:

* An embedded email channel +default_email+. Messages are sent using a configured SMTP server. It can be disabled 
by removing or commenting the e-mail configuration property in the main configuration file.
If enabled it is configured in a separate properties file. The default file provides a detailed information
on the available options so should be easy to edit. 
* An SMS channel +default_sms+. Messages are sent using a configured SMS gateway. Currently only a single gateway 
(Clickatell) is integrated but adding new options is possible.
* A customized channel(s) which send messages using a Groovy script. The typical use case is to use 
an external mailing service with a rich feature set (like tracking of email opens, transactional emails etc).

==== Templates

Message template in Unity is used to configure both message contents and channel over which message is sent.
Thanks to it all consumers of notification feature (e.g. registration form, password credential) 
are configured with message templates only. 

Message template always has to select its purpose (so for what type of message it will be used, 
what type of consumer it supports) and a channel over which the message should be sent. 
Finally message template includes a definition of subject and body of the message, which can use variables, 
dynamically substituted at send time. Variables which must be formated using any of the two supported syntaxes:

----
${VARIABLE_NAME}   
{{VARIABLE_NAME}}
----

Besides variables, message template may also include other templates which are set as "generic" fragments.

Message templates are configured using Admin UI (Server management->Message templates). 
It is also possible to configure them with configuration file (by default +msgTemplates.properties+). 

Variables are replaced dynamically with concrete values when a message is prepared to be sent. Naturally
each subsystem sending messages provides different variables. Therefore each template must be associated with 
a concrete subsystem. This is performed in the template edit screen. The list of available variables for each 
subsystem is also provided there.

Certain subsystems (e.g. invitations) allow for defining custom variables that will be inserted into a template.
Those non-standard variables are always prefixed with 'custom.' string: +${custom.myvar}+.


==== External templates

When using a custom channel sending messages with an external mailing system, it is likely that the external service
provides message templating functionality built in. External notification channel can be configured to take advantage
of this fact. For such channels neither subject nor body in are set, instead a script sending messages 
gets as its input the target template id and a map of template variables - instead of a ready to be sent message. 

A minimal Groovy script which merely logs the aforementioned data can look as follows:

----
log.info("Will send email to {}, using template {} with vars map {}", recipientAddress, templateId, templateParams);
----
